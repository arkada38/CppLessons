//
// Created by MAN on 8/17/2016.
//

#include <iostream>

using namespace std;

// Курс "Введение в программирование(C++)"
// Академия Яндекса, Высшая школа экономики (НИУ ВШЭ)

// По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.
void task_05_1() {
    int n, i;
    cin >> n;
    i = 1;

    while (i * i <= n) {
        cout << i * i << " ";
        i++;
    }
}

// Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1.
void task_05_2() {
    int n, i;
    cin >> n;
    i = 2;

    while (i <= n) {
        if(n % i == 0){
            cout << i;
            break;
        }
        i++;
    }
}

// По данному числу N распечатайте все целые степени двойки, не превосходящие N, в порядке возрастания.
void task_05_3() {
    int n, i;
    cin >> n;
    i = 1;

    while(i <= n){
        cout << i << " ";
        i *= 2;
    }
}

// Дано натуральное число N.
// Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае.
void task_05_4() {
    int n, i;
    cin >> n;
    i = 1;

    while(i <= n){
        if(i == n)
            cout << "YES" << endl;
        else if(i * 2 > n)
            cout << "NO" << endl;
        i *= 2;
    }
}

// Программа получает на вход последовательность целых неотрицательных чисел, каждое число записано в отдельной строке.
// Последовательность завершается числом 0, при считывании которого программа должна закончить свою работу
// и вывести количество членов последовательности (не считая завершающего числа 0).
// Числа, следующие за числом 0, считывать не нужно.
void task_05_5() {
    int sum = 0, now;
    cin >> now;
    while (now != 0){
        sum ++;
        cin >> now;
    }
    cout << sum;
}

// Определите сумму всех элементов последовательности, завершающейся числом 0.
void task_05_6() {
    int sum = 0, now;
    cin >> now;
    while (now != 0) {
        sum = sum + now;
        cin >> now;
    }
    cout << sum;
}

// Последовательность состоит из натуральных чисел и завершается числом 0.
// Определите значение наибольшего элемента последовательности.
void task_05_7() {
    int max, now;
    cin >> now;
    max = now;
    while (now != 0) {
        if (now > max) {
            max = now;
        }
        cin >> now;
    }
    cout << max;
}

// Последовательность состоит из натуральных чисел и завершается числом 0.
// Определите, какое количество элементов этой последовательности, равны ее наибольшему элементу.
void task_05_8() {
    int max, now, n;
    cin >> now;
    max = now;
    n = 0;

    while (now != 0) {
        if (now == max)
            n++;
        if (now > max) {
            max = now;
            n = 1;
        }
        cin >> now;
    }
    cout << n;
}

// Последовательность состоит из натуральных чисел и завершается числом 0.
// Определите значение второго по величине элемента в этой последовательности, то есть элемента,
// который будет наибольшим, если из последовательности удалить наибольший элемент.
void task_05_9() {
    int max, now, n;

    cin >> now;
    max = now;
    n = 0;

    cin >> now;
    if (now < max) {
        n = now;
    }
    if (now >= max) {
        n = max;
        max = now;
    }

    cin >> now;
    while (now != 0) {
        if (now >= max) {
            n = max;
            max = now;
        }
        else if(now > n)
            n = now;

        cin >> now;
    }
    cout << n;
}

// Последовательность Фибоначчи определяется так:
// F(0) = 0, F(1) = 1, …, F(n) = F(n−1) + F(n−2).
// По данному числу N определите N-е число Фибоначчи F(N).
void task_05_10() {
    int fn2, fn1, fn, n, i;

    cin >> n;
    fn2 = 0;
    fn1 = 1;
    fn = fn1 + fn2;

    i = 2;
    while (i < n && n > 2) {
        fn2 = fn1;
        fn1 = fn;
        fn = fn1 + fn2;
        i++;
    }

    cout << fn << endl;
}

// Последовательность Фибоначчи определяется так:
// F(0) = 0, F(1) = 1, …, F(n) = F(n−1) + F(n−2).
// Дано натуральное число A. Определите, каким по счету числом Фибоначчи оно является,
// то есть выведите такое число N, что F(N) = A.
// Если А не является числом Фибоначчи, выведите число -1.
void task_05_11() {
    int fn2, fn1, fn, n, a;

    cin >> a;

    fn2 = 0;
    fn1 = 1;
    fn = fn1 + fn2;
    n = 2;

    while (fn < a) {
        fn2 = fn1;
        fn1 = fn;
        fn = fn1 + fn2;
        n++;
    }

    if(fn == a)
        cout << n << endl;
    else
        cout << -1 << endl;
}

// Дана последовательность натуральных чисел, завершающаяся числом 0.
// Определите, какое наибольшее число подряд идущих элементов этой последовательности равны друг другу.
void task_05_12() {
    int n1, n, i, i1;

    cin >> n;
    i = 1;
    i1 = 1;

    n1 = n;
    cin >> n;
    while (n != 0) {
        if(n1 != n)
            i = 1;
        if(n1 == n)
            i++;
        if(i > i1)
            i1 = i;

        n1 = n;
        cin >> n;
    }

    cout << i1 << endl;
}

// Элемент последовательности называется локальным максимумом,
// если он строго больше предыдущего и последующего элемента последовательности.
// Первый и последний элемент последовательности не являются локальными максимумами.
// Дана последовательность натуральных чисел, завершающаяся числом 0.
// Определите количество строгих локальных максимумов в этой последовательности.
void task_05_13() {
    int n0, n1, n2, i;

    i = 0;

    cin >> n2 >> n1 >> n0;

    while (n0 != 0) {
        if(n1 > n2 && n1 > n0)
            i++;

        n2 = n1;
        n1 = n0;
        cin >> n0;
    }

    cout << i << endl;
}

// Определите наименьшее расстояние между двумя локальными максимумами последовательности натуральных чисел,
// завершающейся числом 0. Если в последовательности нет двух локальных максимумов, выведите число 0.
void task_05_14() {
    int n0, n1, n2, i0, i1, m;

    i1 = 0;
    i0 = 0;
    m = 0;

    cin >> n2 >> n1 >> n0;

    while (n0 != 0) {
        if(n1 > n2 && n1 > n0){
            if(m != 0 && (i1 == 0 || i1 > i0))
                i1 = i0;

            i0 = 1;
            m = 1;
        }
        else
            i0++;

        n2 = n1;
        n1 = n0;
        cin >> n0;
    }

    cout << i1 << endl;
}